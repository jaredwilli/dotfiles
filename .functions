#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `vs` with no arguments opens the current directory in VSCode, otherwise
# opens the given location
function vs() {
	if [ $# -eq 0 ]; then
		code .;
	else
		code "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}




# Copy w/ progress
cp_p () {
	rsync -WavP --human-readable --progress $1 $2
}

gify('out.mp4', 'out.gif', function(err){
	if (err) throw err;
});

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
	if [[ -n "$1" ]]; then
		if [[ $2 == '--good' ]]; then
			ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
			time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
			rm out-static*.png
		else
			ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
		fi
	else
		echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
	fi
}

# Download youtube?
function youtube_song () {
    youtube-dl --audio-format m4a -x "$@"
}


## Git and github work flows

function pr_github() {
    local branch=${1:-master}
    local remote=${2:-github}

    local status="$(git status | grep 'Changes to be committed')"

    if [[ -n "$status" ]]; then
        echo git commit
        git commit 3>&1 1>&2 2>&3
    fi

    git push origin $branch
    echo git push origin $branch
    local result=$(tempfile)
    hub pull-request -h origin/$branch -b $remote/$branch 2>$result
    local uri="$(cat $result)"
    echo hub pull-request -h origin/$branch -b $remote/$branch
    rm $result

    if [ "$uri" != "Aborting due to empty pull request title" ]
    then
        echo "open $uri"
        google-chrome "$uri"
    fi
    # TODO: auto merge
}



## NPM / repo scaffolds
# Via https://github.com/thlorenz/dotfiles/blob/master/bash/functions/ngen.sh

function npmify() {
    ngenplus $1 $2
    nstart
}

function nstart() {
    testling=0
    travis=0

    # dumb args parsing since I couldn't get getopts to work inside a function
    # -a turns on travis, -s turns on testling
    for v in $@
    do
      [[ $v == '-a' ]] && travis=1
      [[ $v == '-s' ]] && testling=1
    done

    echo 'initializing package ..'
    (command -v pkginit >/dev/null 2>&1 && pkginit) || `npm init`

    # Parse out description that we included in package.json during pkginit
    description=$(cat package.json | grep description | sed 's/\"description\"\ *:\ *\"//; s/\",//; s/^[ \t]*//')

    echo 'initializing repo ..'
    gitify $(basename $PWD) "$description"

    echo "# $(basename $PWD)"                                                                      >> README.md

    if [[ $travis == 1 ]]; then
      echo 'initializing travis ..'
      echo "$(travisify badge)" >> README.md
      travisify
      travisify test
    fi


    if [[ $testling == 1 ]]; then
      echo 'initializing testling ..'
      echo "" >> Readme.md
      echo "$(testlingify badge)" >> README.md
      testlingify
      testlingify test
    fi

    if [[ $travis == 1 ||  $testling == 1 ]]; then
      mkdir test
      touch test/index.js
    fi

    cp ~/.config/nstart/{LICENSE,.gitignore} .

    echo 'building readme ..'

    echo ''                                                                                        >> README.md
    echo $description                                                                              >> README.md
    echo ''                                                                                        >> README.md

    echo '```js'                                                                                   >> README.md
    echo '// TODO'                                                                                 >> README.md
    echo '```'                                                                                     >> README.md
    echo ''                                                                                        >> README.md

    echo '## Status'                                                                               >> README.md
    echo ''                                                                                        >> README.md
    echo 'Nix, Nada, Nichevo, Nothing --> go away!'                                                >> README.md
    echo ''                                                                                        >> README.md

    echo '## Installation'                                                                         >> README.md
    echo ''                                                                                        >> README.md
    echo "    npm install $(basename $PWD)"                                                        >> README.md
    echo ''                                                                                        >> README.md
    echo '## [API](https://thlorenz.github.io/$(basename $PWD)'                                    >> README.md
    echo ''                                                                                        >> README.md
    echo ''                                                                                        >> README.md
    echo '## License'                                                                              >> README.md
    echo ''                                                                                        >> README.md
    echo 'MIT'                                                                                     >> README.md

    git add .
    # gitify already did an initial commit so we just amend our changes to it
    git commit --amend --no-edit
    git push origin master -f
}

# Note sure about this one but i think its worth saving
update_webkit () {
	local rev=$( cat /Applications/WebKit.app/Contents/Resources/VERSION )
	local url=$( curl --silent http://nightly.webkit.org/builds/trunk/mac/latest | egrep "http://.*WebKit-SVN-r[0-9]+.dmg" -o | head -n 1 )
	local latest=$( echo $url | egrep '[0-9]{4,}' -o )
	if [ "$latest" == "" ]; then
		echo "Couldn't get latest WebKit revision" > /dev/stderr
		return 1
	fi
	if [ "$latest" == "$rev" ]; then
		echo "WebKit already up to date [$rev]" > /dev/stderr
		return 0
	fi
	echo "Updating WebKit from $rev to $latest..." > /dev/stderr

	curl -sL $url > /tmp/latest-webkit-svn.dmg
	if ! [ -f /tmp/latest-webkit-svn.dmg ]; then
		echo "Download from $url failed" > /dev/stderr
		return 1
	fi

	hdiutil attach /tmp/latest-webkit-svn.dmg -mountpoint /tmp/latest-webkit-svn -quiet

	killall -QUIT WebKit 2>/dev/null
	rm -rf /Applications/WebKit.app 2>/dev/null

	ret=0
	if cp -R /tmp/latest-webkit-svn/WebKit.app /Applications/WebKit.app; then
		echo "WebKit updated to $latest."
	else
		echo "Failed to update" >/dev/stderr
		ret=1
	fi

	hdiutil detach /tmp/latest-webkit-svn -quiet
	rm /tmp/latest-webkit-svn.dmg 2>/dev/null

	return $ret
}

# Below are from: https://github.com/necolas/dotfiles/tree/master/shell/functions

# Recursively delete files that match a certain pattern
# (by default delete all `.DS_Store` files)
cleanup() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}



## switch shells
use_bash(){
    chsh -s /bin/bash
    echo "open new Terminal"
}

use_zsh(){
    chsh -s /bin/zsh
    echo "open new Terminal"
}


# Copy w/ progress
cp_p () {
	rsync -WavP --human-readable --progress $1 $2
}

gify('out.mp4', 'out.gif', function(err){
	if (err) throw err;
});

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
	if [[ -n "$1" ]]; then
		if [[ $2 == '--good' ]]; then
			ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
			time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
			rm out-static*.png
		else
			ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
		fi
	else
		echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
	fi
}

# Download youtube?
function youtube_song () {
    youtube-dl --audio-format m4a -x "$@"
}


## Git and github work flows

function pr_github() {
    local branch=${1:-master}
    local remote=${2:-github}

    local status="$(git status | grep 'Changes to be committed')"

    if [[ -n "$status" ]]; then
        echo git commit
        git commit 3>&1 1>&2 2>&3
    fi

    git push origin $branch
    echo git push origin $branch
    local result=$(tempfile)
    hub pull-request -h origin/$branch -b $remote/$branch 2>$result
    local uri="$(cat $result)"
    echo hub pull-request -h origin/$branch -b $remote/$branch
    rm $result

    if [ "$uri" != "Aborting due to empty pull request title" ]
    then
        echo "open $uri"
        google-chrome "$uri"
    fi
    # TODO: auto merge
}


## NPM / repo scaffolds
# Via https://github.com/thlorenz/dotfiles/blob/master/bash/functions/ngen.sh

function npmify() {
    ngenplus $1 $2
    nstart
}

function nstart() {
    testling=0
    travis=0

    # dumb args parsing since I couldn't get getopts to work inside a function
    # -a turns on travis, -s turns on testling
    for v in $@
    do
      [[ $v == '-a' ]] && travis=1
      [[ $v == '-s' ]] && testling=1
    done

    echo 'initializing package ..'
    (command -v pkginit >/dev/null 2>&1 && pkginit) || `npm init`

    # Parse out description that we included in package.json during pkginit
    description=$(cat package.json | grep description | sed 's/\"description\"\ *:\ *\"//; s/\",//; s/^[ \t]*//')

    echo 'initializing repo ..'
    gitify $(basename $PWD) "$description"

    echo "# $(basename $PWD)"                                                                      >> README.md

    if [[ $travis == 1 ]]; then
      echo 'initializing travis ..'
      echo "$(travisify badge)" >> README.md
      travisify
      travisify test
    fi


    if [[ $testling == 1 ]]; then
      echo 'initializing testling ..'
      echo "" >> Readme.md
      echo "$(testlingify badge)" >> README.md
      testlingify
      testlingify test
    fi

    if [[ $travis == 1 ||  $testling == 1 ]]; then
      mkdir test
      touch test/index.js
    fi

    cp ~/.config/nstart/{LICENSE,.gitignore} .

    echo 'building readme ..'

    echo ''                                                                                        >> README.md
    echo $description                                                                              >> README.md
    echo ''                                                                                        >> README.md

    echo '```js'                                                                                   >> README.md
    echo '// TODO'                                                                                 >> README.md
    echo '```'                                                                                     >> README.md
    echo ''                                                                                        >> README.md

    echo '## Status'                                                                               >> README.md
    echo ''                                                                                        >> README.md
    echo 'Nix, Nada, Nichevo, Nothing --> go away!'                                                >> README.md
    echo ''                                                                                        >> README.md

    echo '## Installation'                                                                         >> README.md
    echo ''                                                                                        >> README.md
    echo "    npm install $(basename $PWD)"                                                        >> README.md
    echo ''                                                                                        >> README.md
    echo '## [API](https://thlorenz.github.io/$(basename $PWD)'                                    >> README.md
    echo ''                                                                                        >> README.md
    echo ''                                                                                        >> README.md
    echo '## License'                                                                              >> README.md
    echo ''                                                                                        >> README.md
    echo 'MIT'                                                                                     >> README.md

    git add .
    # gitify already did an initial commit so we just amend our changes to it
    git commit --amend --no-edit
    git push origin master -f
}

# Note sure about this one but i think its worth saving
update_webkit () {
	local rev=$( cat /Applications/WebKit.app/Contents/Resources/VERSION )
	local url=$( curl --silent http://nightly.webkit.org/builds/trunk/mac/latest | egrep "http://.*WebKit-SVN-r[0-9]+.dmg" -o | head -n 1 )
	local latest=$( echo $url | egrep '[0-9]{4,}' -o )
	if [ "$latest" == "" ]; then
		echo "Couldn't get latest WebKit revision" > /dev/stderr
		return 1
	fi
	if [ "$latest" == "$rev" ]; then
		echo "WebKit already up to date [$rev]" > /dev/stderr
		return 0
	fi
	echo "Updating WebKit from $rev to $latest..." > /dev/stderr

	curl -sL $url > /tmp/latest-webkit-svn.dmg
	if ! [ -f /tmp/latest-webkit-svn.dmg ]; then
		echo "Download from $url failed" > /dev/stderr
		return 1
	fi

	hdiutil attach /tmp/latest-webkit-svn.dmg -mountpoint /tmp/latest-webkit-svn -quiet

	killall -QUIT WebKit 2>/dev/null
	rm -rf /Applications/WebKit.app 2>/dev/null

	ret=0
	if cp -R /tmp/latest-webkit-svn/WebKit.app /Applications/WebKit.app; then
		echo "WebKit updated to $latest."
	else
		echo "Failed to update" >/dev/stderr
		ret=1
	fi

	hdiutil detach /tmp/latest-webkit-svn -quiet
	rm /tmp/latest-webkit-svn.dmg 2>/dev/null

	return $ret
}


